#!/bin/perl
#
#  C Object System
#  COS generics (filter)
# 
#  Copyright 2017+ Chris Marshall <chm@cpan.org>
#  Copyright 2007+ Laurent Deniau <laurent.deniau@gmail.com>
# 
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

use File::Basename;
use Getopt::Long;
use File::Path;

# default settings
$progname=basename($0);
$cpp="cc -E -I."; # "ucpp -I.";
@infiles=();
@filelist=();
$out="_cosgen.c";
$datestr=scalar localtime();

# helper
sub usage() {

    print <<"END_OF_TEXT" ;

  $progname extracts COS defgeneric from header files
  and outputs a C file which must be compiled/linked with your project.

  Usage:
    $progname <options> files

  Options:
    --help
      This help.

    --in=<file_name>
      Use the content of file_name to specify list of files
      Multiple files can be provided with multiple --in

    --out=<file_name>
      Put the result in file_name
      Default is: $out

    --cpp=<command>
      Specify the command for preprocessing the source files
      Default is: $cpp

END_OF_TEXT

    exit 1;
}

# parse arguments
GetOptions(
    "in=s" => \@infiles,
    "out=s" => \$out,
    "cpp=s" => \$cpp,
    "help" => \&usage,
) or usage();

# add @infiles to @filelist
foreach my $in ( @infiles ) {
    open IN, "<$in" or die "$progname: could not open '$in' for reading: $!";
    my (@inlist) = <IN>;
    close IN;
    @filelist = (@filelist, @inlist);
}

# add non-option files to @filelist
@filelist = (@filelist,@ARGV) if @ARGV;

# print "\$in = (@infiles)\n";
# print "\$out = '$out'\n";
# print "\$cpp = '$cpp'\n";
# print "\@filelist is (@filelist)\n"; 

##### Start of _cosgen.c #####

mkpath( dirname($out) );

open(my $outfh, ">", "$out") or die "cannot open > '$out': $!";

print $outfh <<"END_OF_TEXT" ;
/*
 * -----------------------------
 * COS generics
 *
 * DO NOT EDIT - DO NOT EDIT - DO NOT EDIT
 * This file was automatically generated by $progname
 * $datestr
 * -----------------------------
 */

#include <cos/Object.h>

END_OF_TEXT

my $gens = '';
for my $file (@filelist) {
    # retrieve generics
    my $gen= qx( $cpp -DCOS_NOCOS $file );
    $gen =~ tr/\n\t/  /;
    $gen =~ s/\b ( defgenericv* ) \s* \( ( [^;]* ) ; /\n\1(\2;\n/xg;
    $gen =~ s/\s*([()*])\s*/\1/g;  # remove whitespace around (, ), and *
    $gen =~ s/\s*,\s*/, /g;        # standardize whitespace around commas
    $gen = join( "\n", grep { m/^ defgenericv? \( [^;]* ; $/x } split "\n", $gen );

    # includes (looks like a hack so build everything works)
    if ( $gen ) {
        $file =~ s,^.*include/,,;
        $file =~ s,^.*src/,,;
        print $outfh "#include \"$file\"\n";
        $gens .= "\n" . $gen;
    }
}

# makgeneric
print $outfh "\n";
$gens =~ s/defgeneric/makgeneric/g;

# schwartzian transform for sort by field after ',\s'
@gens = map { $_->[0] }
        sort { $a->[1] cmp $b->[1] }
        map { [$_, m/,\s(.*)$/] } split "\n", $gens;

# Could use List::Util uniq here
my %gdups = ();
foreach my $g (@gens) {
    next if $gdups{$g}++;
    print $outfh "$g\n";
}

##### Enf of _cosgen.c #####
close($outfh);

# end of script
